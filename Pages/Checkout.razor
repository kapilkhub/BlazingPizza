@page "/checkout"
@using BlazingPizza.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
	<EditForm EditContext=editContext OnValidSubmit=PlaceOrder OnInvalidSubmit="ShowError">
		<div class="checkout-cols">
			<div class="checkout-order-details">
				<h4>Review order</h4>
				@foreach (var pizza in Order.Pizzas)
				{
					<p>
						<strong>
							@(pizza.Size)"
							@pizza.Special.Name
							(£@pizza.GetFormattedTotalPrice())
						</strong>
					</p>
				}

				<p>
					<strong>
						Total price:
						£@Order.GetFormattedTotalPrice()
					</strong>
				</p>
			</div>
			<div class="checkout-delivery-address">
				<h4>Deliver to...</h4>
				@if (isError)
				{
					<div class="alert alert-danger">Please enter a name and address.</div>
				}
				<AddressEditor Address="Order.DeliveryAddress" />
			</div>
		</div>

		<button class="checkout-button btn btn-warning" disabled="@isError">
			Place order
		</button>
		
		<DataAnnotationsValidator />
	</EditForm>
</div>


@code {
	Order Order => OrderState.Order;

	private bool isError;
	private EditContext editContext;

	protected override void OnInitialized()
	{
		editContext = new(Order.DeliveryAddress);
		editContext.OnFieldChanged += HandleFieldChanged;
	}

	private void ShowError()
	{
		isError = true;
	}

	private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
	{
		isError = !editContext.Validate();
		StateHasChanged();
	}

	public void Dispose()
	{
		editContext.OnFieldChanged -= HandleFieldChanged;
	}

	async Task PlaceOrder()
	{
		var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
		var newOrderId = await response.Content.ReadFromJsonAsync<int>();
		OrderState.ResetOrder();
		NavigationManager.NavigateTo($"myorders/{newOrderId}");
	}
}
